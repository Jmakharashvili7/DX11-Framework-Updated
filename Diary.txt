Week 1:

Downloaded the framework and spent majority of the time familiarizing myself with the framework. It was quite daunting to see how much of a diffrence there is drawing
a single triangle in DirectX compared to OpenGL. There's around 500 lines of code just to draw a single triangle. Of course using modern OpenGL is also a similar experience
but OpenGL still feels like its a lot more begginer friendly. I was not able to attend class due to my self isolation so I had to do a lot of online researching to figure out
how some of the code worked but I have a good understanding of the code now.

Week 2:

Setup a small solar system with a yellow sun in the middle and two planets of diffrent sizes rotating around the sun. The two planets have small white moons rotating around them.
I learned a lot and got a deeper understanding of how matrix transformations work and how changing the order of transformations effects the object. I had to setup diffrent vertex 
buffers for every object as they all had diffrent colors and sizes and it was more practical to specify size in the vertex buffer rather than scale them in the update method. In the
future planning on setting up a 100 asteroid belt bonus task from today using instancing. After this week I decided to dedicate my project to this solar system theme. I will be making
either a sci-fi game or a simulator where I'll have a solar system runnning that will be as realistic as I can get it.

Week 3:

Did a lot of experimenting with the shader for the most of the session. Added a pyramid as well under the solar system for the time being. I also decided to make a diary in the actual code as
a txt file as GitHub will save it and it's good to fill out every week after work. I also will be updating my twitter with weekly updates about how the project is progressing. Shaders are
not easy but they're not as hard as I thought either. I will be spending the week trying to learn more about the shaders.

Week 4:

Started working on normals. I am trying to implement vector normal avaraging according to the book introduction to DirectX. Current output is just a blank screen as I have not been able to finish
setting up normals and thus I will try my best to finish it before the next tutorial. I will have to implement a mesh class that will contain all the indices, vertices, triangle count, vertex count,
etc. I also might have to implement my own vector class for math purposes, but it depends on how it will work once I have implemented the mesh class. Since my current output is a blank screen heres my
tweet on my account which shows my last working output. https://twitter.com/JMakharashvili/status/1453736737876758531?s=20

Week 5:

Implemented normal avaraging and tried to merge vertex and index buffer into one method. Currently the engine compiles but it does not draw properly.
Judging from the output theres a problem with either the index buffer or vertex buffer and I will be trying to get this fixed before next week. Otherwise
Lighting has been implemented properly and just need to fix the bug. The normal avaraging is in Math3D.h and takes in an index buffer, a vector buffer,
and the triangle count.

Week 6: 

I have finally been able to resolve the normal issue which was changing WORD buffer to UINT buffer. The issue has been haunting me for 3 weeks now but I have finallyt fixed it
and properly updated the lighting model to work well. Next goal will be to catch up to all the tutorials over the weekend. Update 2: I have finally added a BaseObject class which
makes the code a lot easier to edit and use. If you need to render and object its one Render() call and you make an object in one call by passing all the information it needs to setup
the index and vertex buffers and normals. The base object is very flexible and can take any real object. The code is much smaller now which is always a good thing. Once I make game
objects they will inherit from the BaseObject as it will only contain what every game object needs. Next goal is to catch up to the tutorials.

Week 7:

Caught up to the tutorials. Added a camera class and obj loading. obj loading looks fine and the camera class works as intended. Also added a base object class for obj based objects.
goal for next week is to implement proper obj files for the planets and make the game look more like a solar system. Another goal for some time is to add an asteroid belt using inst